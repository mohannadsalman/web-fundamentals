intermedit fundation
//////////////////////////////////////
1)
function sigma(n) {
    var sum = 0;
    for (var i = 0; i <= n; i++) {
        sum += i;
    }
    return sum;
}
//////////////////////////////////////////////////////
2)
function factorial(m) {
    var mult = 1;
    for (var i = 1; i <= m; i++) {
       
       mult *= i;
        console.log( mult);
    }
    return mult;
}
/////////////////////////////////////////
3)
function fibonacci(n) {
   
    var newnum = 0;
    var prev = 0;
    var curr= 1;

    
    if (n === 0 || n === 1) {
        return n;
    }
    
    for (var i = 2; i <= n; i++) {
        newNum = prev + curr;
        prev = curr;
        curr = newNum;
    }
    return curr;
}
////////////////////////////////////////////////////
4)
function last(a) {
    if (a.length <= 2) {
        return null;
    }
    return a[a.length - 2];
}
///////////////////////////////////////////////////////
5)function ntolast(a, n) {
    if (a.length < n) {
        return null;
    }
    return a[a.length - n];
}
/////////////////////////////////////////////////////////////////
6) function Large(a) {
    var result = a[0];
    var temp = 0;
    var done = false;

    if (a.length < 2) {
        return null;
    }

    while (done == false) {
        done = true;
        for (var i = 1; i < a.length; i++) {
            if (a[i - 1] > a[i]) {
                done = false;
                temp = a[i - 1];
                a[i - 1] = a[i];
                a[i] = temp;
            }
        }
    }
    result = a[a.length - 2];
    return result;
}

/////////////////////////////////////////////////////////////////
7)
function Trouble(a) {
    var newarray = [];
    var m= 0;

    for (var i = 0; i < a.length; i++) {
        while (m < 2) {
            newarray.push(a[i]);
            m++;
        }
        n = 0;
    }
    return newarray;
}

